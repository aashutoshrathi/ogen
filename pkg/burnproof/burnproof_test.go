package burnproof_test

import (
	"bytes"
	"encoding/hex"
	"github.com/olympus-protocol/ogen/pkg/burnproof"
	"github.com/stretchr/testify/assert"
	"testing"
)

var burnProof = "94561e0017dad2e362d6022efdadc844595febd33b7b0bac7aad25d134cdd6a9339ae778db27b5942e931aec5e67174fb99568f48c3e02183c58563f88a046971aed64a37256b530f82dc9d04e255d5e2d43fca1d691e1d63a4b7cba1ae8b6cb50f837be7f2dae19f0bd5ece5c1b9e2612360bc4752a0e222253b802828e3bd11d05572606627681a88f573f527433764429b0e38ad08c530d5b8dec352c72f724e7b41f48a0fcbef1fba9d4083f5a54f1191edfb8b5c2ef81ac76ecc42fcc38011f112ec1512bb3a01116dc9b1af8f21e01df739cc1899bc182a990f0b159f741914359754ce91035a2a33a3ac43f4d123be2555e4691f82d371b81e9ab7387b133161328102f9641bab8b14b79bfcf9dd70c57c20b53a4f090784c613d1dd620ca24c5bf8844c26a2cb9ff45ef9e5136a1ac596881a19c62f168baba47b4ef2ece4c826670c46a5f949fd20d2484e7df6ebc0bac7c29d1af5093a9c40e6d55ecf6d8b80e4c28cb76305429810b881e45e976f3395f96808168517d5d21d24ce8c55a640aaa7f12762be616188ea56a1e44fb54fa392f2ac9472d7e3be8effecbb26d2f705bf6c0ada380e3db40afb5b71c2f812b9f70c9861b1f4403830850190d7a464781416dcad6679deb37b290d403d1b5bf70986d03d00031f45d73c2ab0ea6926b9e133ba5175560638e9a7edddb9b54fbc2513483f2dc4ad86ebd4446b7d857e7519cc15a13b0ae912b728c33baef984aacf16b19dcafe2dcaf2bc228deae6f8106b95677a0c664ad81ebde07f7b36351b844534a092aab487edd03404b14eb17dff9d9cbd50195b09e0c2d9ab622ca83c19da97b4a7fc70cb2e645ddadb2f5ab7fe984551ccd9609b1ca156c8afcefb142e3a93d9e16034beb103cabe610a7a1a9b0a8e3cd03345682a2ee43ec54ff6a2a7fde8a8c0e20dcf4da744bf3f7a75ae49ff554d43ea288e3ebee0fd9a126a1f3b9cbcf8684456953a9313b0a0936fbe22ca1fe4f6831ccd7bc3964ea3ffa9556f22c6cf7da2a7a5e63e7a74040f28502000000014e440a7c63e29f91f567c3f921d3b0d4b96b6f5f4842380ba423f4950394901f000000006b4830450221009eeeff986df67ce714b64fec3f8b78b6263166142949b3124c7eceed4ab63ad402204df058e4ffb6c40f3ad9ba47aff910dd140f948d01549421480588fa9db0edea01210320d40a383de4c6dffe35cbb912c6a117ce0e5ef54530d499150a9b5be656dc34ffffffff0100e1f505000000001976a914a0efa49b23dad0da1b1539a71c5813fac044fde388aca35b0a001976a91480af701fba69d380606ec0f17fdaa30b7b473c0a88ac60e6270017de334368d1bcbb1a1e800eb6efa3002a534e1419822a97186e02e946ebcc7233a57a18f3b9925d12a7323cbc38d0d1547b9be7b238393bea1ed25b400686d1ddb72cff6e4fb6cbd05c742878cb171db01158c83afee51541c6d4ae73723ff1615acd2eea4bfc049d28319be907d77cb452724149e3058eb1daa9622aa9c68fb63d3fec8aa00dabd873509ab3b2c9d60a8f3eb670c44125641db0cc29fb936d1f903de8c4aff8b8c0fdaed3e51fae5b758d0c96658457ab8208985f936b850ec4d783acaec444cecfc7840ae91eb4c7b5bf882c5a47a5e58195e2778a0b7607ab7468e9886f2c301ac4c1621a7e7fcf9715b486865e3bb3ba5fe1b7099642317cd3018a4caf538406821a16c56d8ce3fab8894766450f75a6b6ae7723451a0c928978c2bb1005283ae4cf80ed3bdd3d5c2984233f6ebfcfc55b4e3cb4eb8fd4507f498d54868e36a84d429a2b499dc9cf84a574759fcc1c591825a98deb56d79ba8be41ea412115a251f056b66e8ce05f87b4b863c6761214e973ad362d27c155c606395399a32996448c9823f7d1309fbe44410756cef3612e2d8f871c5660780dc5989129de789d51616706a416320f77a0f82092ed5a8fe5ee09e1de31560dca9f0ed740bf991e00477faab145a2a54135182609cf264535c1fdb907f2ea555eb75199587ff79dd7bd1fe4a21691877632833fbbdf0263caa23aeac7b24f020d6519f90b482787d19eb5630ab228a417097f511677b20fdf8a15777bdd68f987d549198acd351f05f61f9fe83a025254cc9388dc85b1010c235c1fb88e3e8a073f534fde9678a9b6f8667e318f2b97143eefb9edb7ce1bd9927c101bf4db076d02abc10a9320f490dfef86b164ef2309107d7dd1c23197ed71324cda2f44e9d40b1e81b3c8f0779b7494611a8616aa9471f752c159f556130a804b3067f7df747a523d8879242ff470db06f5e1994a98297032b7dfdad8a4979e4fa54ece41e22ca1fe4f6831ccd7bc3964ea3ffa9556f22c6cf7da2a7a5e63e7a74040f285020000000167e49024415f20f2e683da8fb07e0dfdbd531087e7692fa7cb50650d02ed269b000000006b483045022100c69c5e0a6dd7d48d22cd306e0cdae238292ba417aa0a38ff8441752b2398dbc402206cafa30ab7beafbee80333f303443fdbca2b1ea7d920dee5b7f1fffc9bea5fb6012102654e5cf3f56101d2da6497db0d8f20df044cc8c5fa58c74f3ad0b5a7a0fc1328ffffffff0100e1f505000000001976a914a0efa49b23dad0da1b1539a71c5813fac044fde388aca35b0a001976a9145bda310f4bb7e2bae6e3b1c46bde4bb55e95bef888ac61e62700173cc1bc224c3b8a6ed76185b6f66db98510e740d7e83740ef705f50d2748a1c94a57a18f3b9925d12a7323cbc38d0d1547b9be7b238393bea1ed25b400686d1ddb72cff6e4fb6cbd05c742878cb171db01158c83afee51541c6d4ae73723ff1615acd2eea4bfc049d28319be907d77cb452724149e3058eb1daa9622aa9c68fb63d3fec8aa00dabd873509ab3b2c9d60a8f3eb670c44125641db0cc29fb936d1f903de8c4aff8b8c0fdaed3e51fae5b758d0c96658457ab8208985f936b850ec4d783acaec444cecfc7840ae91eb4c7b5bf882c5a47a5e58195e2778a0b7607ab7468e9886f2c301ac4c1621a7e7fcf9715b486865e3bb3ba5fe1b7099642317cd3018a4caf538406821a16c56d8ce3fab8894766450f75a6b6ae7723451a0c928978c2bb1005283ae4cf80ed3bdd3d5c2984233f6ebfcfc55b4e3cb4eb8fd4507f498d54868e36a84d429a2b499dc9cf84a574759fcc1c591825a98deb56d79ba8be41ea412115a251f056b66e8ce05f87b4b863c6761214e973ad362d27c155c606395399a32996448c9823f7d1309fbe44410756cef3612e2d8f871c5660780dc5989129de789d51616706a416320f77a0f82092ed5a8fe5ee09e1de31560dca9f0ed740bf991e00477faab145a2a54135182609cf264535c1fdb907f2ea555eb75199587ff79dd7bd1fe4a21691877632833fbbdf0263caa23aeac7b24f020d6519f90b482787d19eb5630ab228a417097f511677b20fdf8a15777bdd68f987d549198acd351f05f61f9fe83a025254cc9388dc85b1010c235c1fb88e3e8a073f534fde9678a9b6f8667e318f2b97143eefb9edb7ce1bd9927c101bf4db076d02abc10a9320f490dfef86b164ef2309107d7dd1c23197ed71324cda2f44e9d40b1e81b3c8f0779b7494611a8616aa9471f752c159f556130a804b3067f7df747a523d8879242ff470db06f5e1994a98297032b7dfdad8a4979e4fa54ece41e22ca1fe4f6831ccd7bc3964ea3ffa9556f22c6cf7da2a7a5e63e7a74040f285020000000167e49024415f20f2e683da8fb07e0dfdbd531087e7692fa7cb50650d02ed269b010000006a47304402206528a96796ee7deea4c735aef0b972dc944b819f15e7ee99a69593f645bfbf3702201270b42e3dee465bd7edf4d5d1e8042afbc7d62c792f690483b03ae284974f0a0121021d2f7ecb40a222543cb9811e2f603c38a80c8f6bbad382382479918f681868a4ffffffff0168965e7e040000001976a914a0efa49b23dad0da1b1539a71c5813fac044fde388aca35b0a001976a914c932357703e02dc7ae1eca50b91e2ecbe6d8b18988ac6cd42e001764f2e6df89bafbf2a2825698f4edc0f9ccd5346f901aab5796c7a4706c47369e7da471deef935fb40f677b0b9bebc74cc01de40712b1859d304be4169671ea051eb60cbc5f8f94351ec2d929590dc7a92e0d725224ba31a7f6195ebdc6a3970b72f35adc25ad9f9a99e94b362d5f6c622b1bf4d34fc16ebc94eedcbb768d0166cf503a8508ec0321ed09a82991041e98d18896027e33e56af12ff8cc1e949ee19ee0c8c92d0cb41b1f44d9862037fc4b223e74df8d7b01e5a81ed1c0963c0aa8360cf15348b72d03ea70750f8374fda7f6ba9a3b97814c951132295ba0b07469cc27a2a55dad4d23a17dd597551314e48c8b631c30fcb8c75a23d2d331c3a7bf8a6f67984a2a557d1f4221d834f3ba16ffa9f1a07df94b52fae04df6cedfb6f85c8a27d29a033a1cd924b4018c695eb8164cc36887f9007ac7fa91a4fd2476deed4418b203c9d1941cc2c3bc9d19a971ef09c15e919fde52cfd70e833e9f004ee4ac76870b826e1645cd6533334e5b6d2e39d159ca06c03299f93f0ff67ea63ca60154743395f67bd88aa9e0badc127293dbfe7a9fe2c76246c51116dfe986f00ed6727137be224d7c32e096c09d2b801cb639c7d79c6a4b876e261550e2e64b9d57dbc033b130e5dab750b852ecdd58e8f599200e9aecd68b3a0bac48f5796eb32dea15f152414a36b1690251c0ece549c51ef8c28bd3373eddbea6de9500d30200caefa7fd2780d3f20686699f4b6fa2f51bbb6cd77ecd3d99bc769b8b607c1e661853cbfe1a04f6ece9da2064838627568a471a7c777f962e7001997f82dbe33e33fb834d14bb7266b293f4e4390bda27dec4f886e835cd7929a1aacf232976a5ea24e18436e9827b691444636268276522f2dbda84b7b15c9647a2ceae86d40b1e81b3c8f0779b7494611a8616aa9471f752c159f556130a804b3067f7df747a523d8879242ff470db06f5e1994a98297032b7dfdad8a4979e4fa54ece41e22ca1fe4f6831ccd7bc3964ea3ffa9556f22c6cf7da2a7a5e63e7a74040f28502000000017abcc373ba619bde6287c1012e206b40d8cf900ee0f3cf6a9ab21847de6766d0000000006b483045022100c4735f2e5d559ac5d14f490e51ff329024b8b6f13ba3c8cd4dd447573672c9e802202d246a827b93cbf465107f8c8668f6f44974def5d9a9cd035bcbd726c9d38f89012103f11ed3ed1ec664792733e4981a58d6f7550c290b712daf1903cfea4860d3072bffffffff01423d0f00000000001976a914a0efa49b23dad0da1b1539a71c5813fac044fde388aca35b0a001976a914c42ac312acdeaf8b5a275705bde45e2e0ebfd35588ac"

const MerkleRoot = "f9afaa28423bf0acf296c3ff688a4bbb18e7d0528fd6f2b688028be5614bc386"

var merkleHash [32]byte

func init() {
	merkleBytes, err := hex.DecodeString(MerkleRoot)
	if err != nil {
		panic(err)
	}
	for i, b := range merkleBytes[:32/2] {
		merkleHash[i], merkleHash[32-1-i] = merkleBytes[32-1-i], b
	}
}

func TestCoinProofDecode(t *testing.T) {
	coinProof := new(burnproof.CoinsProof)

	proofBytes, err := hex.DecodeString(burnProof)
	assert.NoError(t, err)

	buf := bytes.NewBuffer([]byte{})
	buf.Write(proofBytes)

	err = coinProof.Decode(buf)
	assert.NoError(t, err)
}

func TestBurnVerify(t *testing.T) {
	proofBytes, err := hex.DecodeString(burnProof)
	assert.NoError(t, err)

	assert.NoError(t, err)

	err = burnproof.VerifyBurn(proofBytes, merkleHash, "12345")
	assert.NoError(t, err)
}
