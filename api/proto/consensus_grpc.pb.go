// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusClient interface {
	GetParticipationStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParticipationStatus, error)
	GetSlotInfo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*SlotInfo, error)
	GetEpochInfo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*EpochInfo, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) GetParticipationStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParticipationStatus, error) {
	out := new(ParticipationStatus)
	err := c.cc.Invoke(ctx, "/Consensus/GetParticipationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) GetSlotInfo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*SlotInfo, error) {
	out := new(SlotInfo)
	err := c.cc.Invoke(ctx, "/Consensus/GetSlotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) GetEpochInfo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*EpochInfo, error) {
	out := new(EpochInfo)
	err := c.cc.Invoke(ctx, "/Consensus/GetEpochInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
// All implementations must embed UnimplementedConsensusServer
// for forward compatibility
type ConsensusServer interface {
	GetParticipationStatus(context.Context, *Empty) (*ParticipationStatus, error)
	GetSlotInfo(context.Context, *Number) (*SlotInfo, error)
	GetEpochInfo(context.Context, *Number) (*EpochInfo, error)
	mustEmbedUnimplementedConsensusServer()
}

// UnimplementedConsensusServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (UnimplementedConsensusServer) GetParticipationStatus(context.Context, *Empty) (*ParticipationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipationStatus not implemented")
}
func (UnimplementedConsensusServer) GetSlotInfo(context.Context, *Number) (*SlotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotInfo not implemented")
}
func (UnimplementedConsensusServer) GetEpochInfo(context.Context, *Number) (*EpochInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochInfo not implemented")
}
func (UnimplementedConsensusServer) mustEmbedUnimplementedConsensusServer() {}

// UnsafeConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServer will
// result in compilation errors.
type UnsafeConsensusServer interface {
	mustEmbedUnimplementedConsensusServer()
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_GetParticipationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).GetParticipationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consensus/GetParticipationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).GetParticipationStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_GetSlotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).GetSlotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consensus/GetSlotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).GetSlotInfo(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_GetEpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).GetEpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consensus/GetEpochInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).GetEpochInfo(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParticipationStatus",
			Handler:    _Consensus_GetParticipationStatus_Handler,
		},
		{
			MethodName: "GetSlotInfo",
			Handler:    _Consensus_GetSlotInfo_Handler,
		},
		{
			MethodName: "GetEpochInfo",
			Handler:    _Consensus_GetEpochInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus.proto",
}
